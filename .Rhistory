colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
head(cca.data)
head(cca.data)
table(cca.data$SelfComplete)
table(cca.data$NoSelfComplete)
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
summary(lm(data=cca.data,NoSelfComplete~ self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,SelfComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,TotalComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
#contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
summary(lm(data=cca.data,NoSelfComplete~ self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,SelfComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,TotalComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,NoSelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + Recombination))
summary(lm(data=cca.data,SelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + Recombination))
cca.data.clean<-cca.data[- which(is.na(cca.data),arr.ind = TRUE)[,1],]
selfTime.cca <- cca(cca.data.clean[,c(12:13)],cca.data.clean[,c(1:9)])
summary(selfTime.cca)$biplot
summary(self.cca)$biplot
summary(self2.cca)$biplot
reduced<-cca.data.clean[which(cca.data.clean$self=='-20'),]
reduced2<-cca.data.clean[which(cca.data.clean$corr2=='A'),]
mean(reduced$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
mean(reduced2$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
#contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
head(cca.data)
table(cca.data$SelfComplete)
table(cca.data$NoSelfComplete)
summary(lm(data=cca.data,NoSelfComplete~ self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,SelfComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,TotalComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,NoSelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + Recombination))
summary(lm(data=cca.data,SelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + Recombination))
cca.data.clean<-cca.data[- which(is.na(cca.data),arr.ind = TRUE)[,1],]
selfTime.cca <- cca(cca.data.clean[,c(12:13)],cca.data.clean[,c(1:9)])
summary(selfTime.cca)$biplot
summary(self.cca)$biplot
summary(self2.cca)$biplot
reduced<-cca.data.clean[which(cca.data.clean$self=='-20'),]
reduced2<-cca.data.clean[which(cca.data.clean$corr2=='A'),]
mean(reduced$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
mean(reduced2$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
#contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
summary(lm(data=cca.data,NoSelfComplete~ self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,SelfComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,TotalComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
cca.data.clean<-cca.data[- which(is.na(cca.data),arr.ind = TRUE)[,1],]
selfTime.cca <- cca(cca.data.clean[,c(12:13)],cca.data.clean[,c(1:9)])
summary(selfTime.cca)$biplot
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
#contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
summary(lm(data=cca.data,NoSelfComplete~ self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,SelfComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,TotalComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
setwd('/Users/dangates/Desktop/SlimOutput')
library(vegan)
fils<-list.files()[grep('output',list.files())]
#make the table:
finalLines<-t(sapply(1:length(fils),function(fil){
f<-readLines(fils[fil])
#pull out predictors
runDetails<-list(self=as.numeric(strsplit(f[5],": ")[[1]][2]),corr1=c('A','B','C','D','E')[as.numeric(strsplit(f[6],": ")[[1]][2])+1],corr2=c('A','B','C','D','E')[as.numeric(strsplit(f[7],": ")[[1]][2])+1],Migration=c('A','B','C','D')[as.numeric(strsplit(f[8],": ")[[1]][2])+1],Deleterious=c('A','B','C')[as.numeric(strsplit(f[9],": ")[[1]][2])+1],DelDom=as.numeric(strsplit(f[10],": ")[[1]][2]),Beneficial=c('A','B','C')[as.numeric(strsplit(f[11],": ")[[1]][2])+1],BenDom=as.numeric(strsplit(f[12],": ")[[1]][2]),Recombination=as.numeric(strsplit(f[13],": ")[[1]][2]))
#now find if things completed:
runs<-t(sapply(f[grep('Mean phenotype == ',f)],function(x) as.numeric(strsplit(strsplit(x,' == ')[[1]][2],' _ ')[[1]]),USE.NAMES=FALSE))
rownames(runs)<-sapply(f[grep('Mean phenotype == ',f)],function(x) strsplit(x,':')[[1]][1])
noSelf<-c('Incomplete','Complete')[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
Self<-c('Incomplete','Complete')[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
noSelfFin<-c(NA,names(runs[,1][which(runs[,1]> 5*0.8)[1]]))[as.numeric(length(which(runs[,1]> 5*0.8))>0)+1]
SelfFin<-c(NA,names(runs[,2])[which(runs[,2]< -5*0.8)[1]])[as.numeric(length(which(runs[,2]< -5*0.8))>0)+1]
runDetails[[length(runDetails)+1]]<-noSelf
names(runDetails)[length(runDetails)]<-'NoSelfComplete'
runDetails[[length(runDetails)+1]]<-Self
names(runDetails)[length(runDetails)]<-'SelfComplete'
runDetails[[length(runDetails)+1]]<-noSelfFin
names(runDetails)[length(runDetails)]<-'NoSelfCompleteGeneration'
runDetails[[length(runDetails)+1]]<-SelfFin
names(runDetails)[length(runDetails)]<-'SelfCompleteGeneration'
return(runDetails)
}))
cca.data=data.frame(matrix(unlist(finalLines),ncol=13))
colnames(cca.data)<-colnames(finalLines)
cca.data$NoSelfComplete<-as.numeric(cca.data$NoSelfComplete)
cca.data$SelfComplete<-as.numeric(cca.data$SelfComplete)
cca.data$NoSelfCompleteGeneration<-as.numeric(as.character(cca.data$NoSelfCompleteGeneration))
cca.data$SelfCompleteGeneration<-as.numeric(as.character(cca.data$SelfCompleteGeneration))
cca.data$TotalComplete<-(as.numeric(cca.data$NoSelfComplete)-1)+(as.numeric(cca.data$SelfComplete)-1)
contrasts(cca.data$self)<-contr.treatment(levels(cca.data$self),base=3)
#contrasts(cca.data$corr1)<-contr.treatment(levels(cca.data$corr1),base=2)
#contrasts(cca.data$corr2)<-contr.treatment(levels(cca.data$corr2),base=2)
contrasts(cca.data$Migration)<-contr.treatment(levels(cca.data$Migration),base=2)
contrasts(cca.data$Deleterious)<-contr.treatment(levels(cca.data$Deleterious),base=2)
contrasts(cca.data$DelDom)<-contr.treatment(levels(cca.data$DelDom),base=2)
contrasts(cca.data$Beneficial)<-contr.treatment(levels(cca.data$Beneficial),base=2)
contrasts(cca.data$BenDom)<-contr.treatment(levels(cca.data$BenDom),base=2)
contrasts(cca.data$Recombination)<-contr.treatment(levels(cca.data$Recombination),base=2)
self.cca <- cca(cca.data[,c(10,11)],cca.data[,c(1:9)])
summary(self.cca)[c('species','biplot')]
self2.cca <- cca(cca.data[,c(10,11,14)],cca.data[,c(1:7)])
summary(self2.cca)[c('species','biplot')]
plot(self2.cca)
summary(lm(data=cca.data,NoSelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + Recombination))
summary(lm(data=cca.data,SelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + Recombination))
cca.data.clean<-cca.data[- which(is.na(cca.data),arr.ind = TRUE)[,1],]
selfTime.cca <- cca(cca.data.clean[,c(12:13)],cca.data.clean[,c(1:9)])
summary(selfTime.cca)$biplot
summary(self.cca)$biplot
summary(self2.cca)$biplot
reduced<-cca.data.clean[which(cca.data.clean$self=='-20'),]
reduced2<-cca.data.clean[which(cca.data.clean$corr2=='A'),]
mean(reduced$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
mean(reduced2$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
summary(lm(data=cca.data,NoSelfComplete~ self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,SelfComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,TotalComplete~self + corr1 + corr2 + Migration + Deleterious + DelDom + Beneficial + BenDom + Recombination))
summary(lm(data=cca.data,NoSelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + BenDom  + Recombination))
summary(lm(data=cca.data,SelfCompleteGeneration~self + corr1 + corr2 + Migration + Deleterious + Beneficial + BenDom  + Recombination))
cca.data.clean<-cca.data[- which(is.na(cca.data),arr.ind = TRUE)[,1],]
selfTime.cca <- cca(cca.data.clean[,c(12:13)],cca.data.clean[,c(1:9)])
summary(selfTime.cca)$biplot
reduced<-cca.data.clean[which(cca.data.clean$self=='-20'),]
reduced2<-cca.data.clean[which(cca.data.clean$corr2=='A'),]
mean(reduced$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
mean(reduced2$SelfCompleteGeneration)
mean(cca.data.clean$SelfCompleteGeneration)
setwd('/Users/dangates/Desktop/AdaptationScripts2/'
)
library(GridLMM)
library(KRLS)
library(qqman)
library(data.table)
phenotypes<-c('Days to anthesis','Plant height','Anthesis silking interval','Field weight','Bare cob weight','Grain weight per hectare')
#environments<-c("wet6MonthGrowAvg","pre6MonthGrowAvg","cld6MonthGrowAvg","Isothermality")
environments<-c('altitude','meanTemp','annualPrecipitation','vap6MonthGrowAvg','pH',"wet6MonthGrowAvg","pre6MonthGrowAvg","cld6MonthGrowAvg","Isothermality")
phenot<-'Anthesis silking interval'
#lapply(environments,function(env){
env<-'altitude'
sapply(environments,function(env){}
load(paste('./GWASResiduals/',phenot,'_',env,'_GWASResiduals.Rimage',sep=""))
sapply(environments,function(env){
load(paste('./GWASResiduals/',phenot,'_',env,'_GWASResiduals.Rimage',sep=""))
dim(jimbo)
}
)
sapply(phenotypes,function(phenot){
load(paste('./GWASResiduals/',phenot,'_',env,'_GWASResiduals.Rimage',sep=""))
dim(jimbo)
})
11256+7676+11762+7519+4851+6385
49449*16
